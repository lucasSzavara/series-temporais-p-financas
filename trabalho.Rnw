\documentclass{article}

\begin{document}

<< include=FALSE>>=
library(yahoofinancer)
library(dplyr)
library(ggplot2)
library(ggpubr)
library(forecast)
library(qqplotr)
library(fGarch)
@

<<>>=
ibovespa <- Index$new('^BVSP')$get_history(
  start='2020-01-01',
  interval = '1d'
)[, c('date', 'close')]
sp <- Index$new('^SPX')$get_history(
  start='2020-01-01',
  interval = '1d'
)[, c('date', 'close')]
@

<< fig.keep="all", message=FALSE, warning=FALSE>>=
series <- list(ibovespa, sp)
titles <- c('IBOVESPA', 'S&P 500')
graficos <- list()

for (i in 1:length(series)) {
  serie <- series[[i]]
  serie <- serie %>% 
    mutate(logret = c(0, diff(log(close))))
  series[[i]] <- serie
  g.serie <- serie %>% 
    ggplot(aes(x = date, y = close)) +
    geom_line() +
    ylab('Valor no fechamento') +
    xlab('Data')
  g.logret <- serie %>% 
    ggplot(aes(x = date, y = logret)) +
    geom_line() +
    ylab('Log retorno') +
    xlab('Data')
  g.acf <- serie$logret %>% 
    ggAcf() +
    ggtitle(label=NULL)
  g.pacf <- serie$logret %>% 
    ggPacf() +
    ggtitle(label=NULL)
  g.hist <- serie %>% 
    ggplot(aes(logret)) +
    geom_histogram(aes(y = after_stat(density))) +
    stat_function(
      fun = dnorm, 
      lwd = 1, 
      args = list(
        mean = mean(serie$logret),
        sd = sd(serie$logret)
      ), 
      col = 'red'
    ) +
    ylab('Densidade')
  
  g.qqplot <- serie %>% 
    ggplot(aes(sample = logret)) +
    stat_qq_band(bandType = 'boot') +
    stat_qq_line() +
    stat_qq_point() +
    ylab('Valores simulados') +
    xlab('Quantis teoricos')
  g.serie.conjunto <- ggarrange(
    g.serie,
    g.logret,
    g.acf,
    g.pacf,
    g.qqplot,
    g.hist,
    nrow=3,
    ncol=2
  )
  graficos[[i]] <- g.serie.conjunto
  g.serie.conjunto %>% 
    annotate_figure(top=titles[i]) %>% 
    print()
}
# ggarrange(plotlist=graficos, nrow=length(series))
@

<<>>=
coefs.armagarch <- list()
ordens.arma <- list()
ordens.garch <- list()
bics <- c()
for (i in 1:length(series)) {
  serie <- series[[i]]
  fit.ARIMA.Log_ret<- serie$logret %>%
    auto.arima(trace=F, d=0, seasonal=F)
  ordens.arma[[i]] <- fit.ARIMA.Log_ret$arma[1:2]
  p <- ordens.arma[[i]][1]
  q <- ordens.arma[[i]][2]
  
  fit.garch.Log_ret<- (serie$logret ^ 2) %>%
    auto.arima(trace=F, d=0, seasonal=F, stepwise=F, parallel=T)
  ordens.garch[[i]] <- fit.garch.Log_ret$arma[1:2]
  m <- ordens.garch[[i]][1]
  q.g <- ordens.garch[[i]][2]
  
  if (m < q.g) m <- q.g
  bics.prop <- c()
  fits <- list()
  for (j in 1:m) {
    garch.fit <- garchFit(
      eval(substitute(logret ~ arma(p, q) + garch(j, q.g),
                  list(p = p, q = q, j = j, q.g = q.g))),
      serie,
      trace = F,
      cond.dist = 'norm'
    )
    bics.prop[j] <- garch.fit@fit$ics['BIC']
    fits[[j]] <- garch.fit
  }
  
  garch.model <- fits[[which.min(bics.prop)]]
  
  bics[i] <- min(bics.prop)
  
  coefs.armagarch[[i]] <- garch.model@fit$matcoef
}
coefs.armagarch
@

<<>>=
ordens.p <- c(0, 1)
ordens.q <- c(0, 1)
ordens.p.g <- c(1, 1)
ordens.q.g <- c(0, 1)
bics.novo <- c()
fits.novos <- list()
for (i in 1:length(series)) {
  serie <- series[[i]]
  garch.fit <- garchFit(
    eval(substitute(logret ~ arma(p, q) + garch(p.q, q.g),
                list(p = ordens.p[i],
                     q = ordens.q[i],
                     p.q = ordens.p.g[i],
                     q.g = ordens.q.g[i]))),
    serie,
    trace = F,
    cond.dist = 'norm'
  )
  bics.novo[i] <- garch.fit@fit$ics['BIC']
  fits.novos[[i]] <- garch.fit
}
@


\end{document}
